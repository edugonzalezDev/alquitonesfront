# Documentaci√≥n LocalDB - AlquiTones

## Descripci√≥n General
Base de datos local para la aplicaci√≥n AlquiTones que gestiona instrumentos musicales, categor√≠as y usuarios. Utiliza localStorage para persistencia y est√° completamente probada con test unitarios.

---

## üõ†Ô∏è Estructura de Datos

### Categor√≠as (4)
```javascript
{
    id: number,
    name: string,
    icon: string,
    description: string
}
IDs Predefinidos:

Cuerdas (ID: 1)

Viento (ID: 2)

Percusi√≥n (ID: 3)

Teclados (ID: 4)

Productos (12)
javascript
Copy
{
    id: number,
    name: string,
    description: string,
    categoryId: number,
    pricePerDay: number,
    status: string,
    specifications: Array<{label: string, value: string}>,
    images: Array<string>,  // 5 URLs obligatorias
    mainImage: string,       // Primera imagen del array
    createdAt: string
}
Usuarios
javascript
Copy
{
    id: number,
    username: string,
    email: string,
    password: string,
    role: 'admin' | 'client',
    createdAt: string,
    isActive: boolean
}
üîë M√©todos de Autenticaci√≥n
javascript
Copy
// Iniciar sesi√≥n (devuelve usuario o lanza error)
const user = localDB.login('admin@alquitones.com', 'admin123');

// Cerrar sesi√≥n
localDB.logout();

// Obtener usuario activo
const currentUser = localDB.getCurrentUser();

// Verificar rol admin
const isAdmin = localDB.isAdmin();
üì¶ M√©todos CRUD
Para Productos:
javascript
Copy
// Crear (requiere 5 im√°genes)
const newProduct = localDB.createProduct({...});

// Leer
const allProducts = localDB.getAllProducts();
const product = localDB.getProductById(1);

// Actualizar
localDB.updateProduct(1, { name: 'Nuevo nombre' });

// Eliminar
localDB.deleteProduct(1);
Para Usuarios:
javascript
Copy
// Crear (valida email √∫nico)
const newUser = localDB.createUser({...});

// Leer
const allUsers = localDB.getAllUsers();
const user = localDB.getUserById(1);

// Actualizar (no permite emails duplicados)
localDB.updateUser(1, { username: 'nuevo_usuario' });

// Eliminar
localDB.deleteUser(1);
üß™ Pruebas Unitarias Implementadas
javascript
Copy
// Ejecutar todas las pruebas
import { dbTests } from './tests/LocalDB.test.js';
dbTests.runAllTests();
Cobertura de Pruebas:
Productos:

Creaci√≥n con validaci√≥n de 5 im√°genes.

Lectura, actualizaci√≥n y eliminaci√≥n.

B√∫squeda por texto y categor√≠a.

Usuarios:

Registro con email √∫nico.

Gesti√≥n de roles (admin/client).

Validaci√≥n de cuentas activas/inactivas.

Autenticaci√≥n:

Login exitoso y persistencia de sesi√≥n.

Bloqueo de credenciales inv√°lidas.

Logout y verificaci√≥n de roles.

Manejo de cuentas desactivadas.

üñºÔ∏è Ejemplos Frontend
1. Mostrar productos por categor√≠a:
javascript
Copy
function ProductList({ categoryId }) {
    const products = localDB.getProductsByCategory(categoryId);
    return products.map(product => (
        <div key={product.id}>
            <img src={product.mainImage} />
            <h3>{product.name}</h3>
            <p>${product.pricePerDay}/d√≠a</p>
        </div>
    ));
}
2. Gesti√≥n de sesi√≥n de usuario:
javascript
Copy
// Componente de Login
const handleSubmit = (email, password) => {
    try {
        const user = localDB.login(email, password);
        // Redirigir a dashboard
    } catch (error) {
        alert(error.message);
    }
};

// Componente Navbar
const currentUser = localDB.getCurrentUser();
return (
    {currentUser && <button onClick={localDB.logout}>Cerrar sesi√≥n</button>}
);
‚ö†Ô∏è Notas Clave
Im√°genes:

Cada producto debe tener exactamente 5 URLs en images.

Formatos soportados: .PNG, .jpg, .webp.

Seguridad:

Las contrase√±as se almacenan en texto plano (no recomendado para producci√≥n).

Usar isAdmin() para restringir funcionalidades cr√≠ticas.

IDs:

Generados secuencialmente. Para producci√≥n, reemplazar por UUIDs.

üîç Referencia de Productos
Categor√≠a	Productos (IDs)
Cuerdas (1)	Guitarra Fender (1), Viol√≠n (2), Bajo (3)
Viento (2)	Saxof√≥n (4), Clarinete (5), Trompeta (6)
Percusi√≥n (3)	Bater√≠a (7), Congas (8), Platillos (9)
Teclados (4)	Piano (10), Sintetizador (11), Nord (12)
